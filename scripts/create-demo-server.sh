#!/usr/bin/env bash
set -e
script_dir=$(dirname "$0")

__usage="
Usage: $(basename "$0") [-hva] [-n NAME] -i [IMAGE] [-f FLAVOR]
Relies on proper entry in clouds.yaml set via OS_CLOUD env var.
Expects the project in use to have a network with the same name as project.
If project has a security group with the same name as project, it will be used.
If user has a keypair with the same name as a project, it will be used.
Parameters:
    -n NAME   name of the server to create, default is autogenerated test-<random-number>
    -i IMAGE  image to use for the server (defaults discovered cirros qcow2 image)
    -f FLAVOR flavor to use for the server (defaults discovered minimal available flavor suitable for a cirros image)
    -a        make server accessible, create or pick existing floating IP from pool named 'public' and assigns to the server
    -v        be verbose (set -x)
    -h        show this message and exit
"

CREATE_FIP=0
FIP_POOL=${FIP_POOL:-"public"}

while getopts ':hvan:i:f:' arg; do
    case "${arg}" in
        n) server_name="${OPTARG}";;
        i) server_image="${OPTARG}";;
        f) server_flavor="${OPTARG}";;
        a) CREATE_FIP=1;;
        v) set -x ;;
        h) echo "$__usage"; exit 0 ;;
        *) echo "$__usage"; exit 1 ;;
    esac
done

RED='\033[0;31m'
GREEN='\033[0;32m'
NOC='\033[0m'
# shellcheck disable=SC2068 # passing all the args to echo verbatim
function errcho {
    >&2 echo $@;
}
function errcho_nice {
    errcho -e "${GREEN}""$1""${NOC}"
}
function errcho_fail {
    errcho -e "${RED}""$1""${NOC}"
}

if [ -z "$server_name" ]; then
    server_name="test-$RANDOM"
fi

if [ -z "$server_image" ]; then
    for im in $(openstack image list -f value -c ID -c Name | grep -i cirros); do
        # split on first space using shell parameter expansion (bash-specific)
        image_id="${im%% *}" # deletes longest substring that matches ' *' from the end
        image_name="${im#* }" # deletes shortest substring that matches '* ' from the start
        if [ "$(openstack image show "$image_id" -f value -c disk_format)" = "qcow2" ]; then
            server_image=$image_name
            break
        fi
    done
    if [ -z "$server_image" ]; then
        errcho_fail 'could not find suitable image to use, provide image with -i'
        exit 1
    else
        errcho_nice "Using image $server_image"
    fi
fi

if [ -z "$server_flavor" ]; then
    server_flavor=$(openstack flavor list --min-ram 128 --min-disk 1 --sort-column RAM --sort-ascending -f value -c Name | head -n1)
    if [ -z "$server_flavor" ]; then
        errcho_fail 'could not find a suitable flavor to use, provide flavor with -f'
    else
        errcho_nice "Using flavor $server_flavor"
    fi
fi

project=$(openstack configuration show -f value -c auth.project_name)
if openstack network show "$project" > /dev/null 2>&1; then
    errcho_nice "Using network $project"
else
    errcho_fail "Can't find network named $project, abort."
    exit 1
fi
optional_args=""
if openstack security group show "$project" > /dev/null 2>&1; then
    optional_args+=" --security-group $project "
    errcho_nice "Using security group $project"
fi
if openstack keypair show "$project" > /dev/null 2>&1; then
    optional_args+=" --key-name $project "
    errcho_nice "Using keypair $project"
fi
#NOTE: `| tail -n1` below is needed due to https://storyboard.openstack.org/#!/story/2010947
# shellcheck disable=SC2086 # word splitting in optional_args is intentional
server_id=$(openstack server create "$server_name" \
    --key-name "$project" \
    --network "$project" \
    --image "$server_image" \
    --flavor "$server_flavor" \
    --user-data "$script_dir/cirros-http-cpuload.userdata" \
    --use-config-drive \
    $optional_args \
    -f value -c id \
    --wait | tail -n1
)
if [ -z "$server_id" ]; then
    errcho_fail "Failed to create server $server_name"
    openstack server show "$server_name"
    exit 1
fi

echo -n "$server_id" "$server_name"

if [ "$CREATE_FIP" == "0" ]; then
    echo
    exit 0
fi

# NOTE: admin sees all FIPs by default, but non-admin always get empty FIP list
# when listing with project, even with their own, so need to differentiate
project_filter=""
if [ "$project" = "admin" ]; then
    project_filter="--project admin"
fi

# shellcheck disable=SC2086 # word splitting in project_filter is intentional
fip=$(openstack floating ip list $project_filter --status DOWN -f value -c 'Floating IP Address' | sort -R | head -n1)
if [ -z "$fip" ]; then
    fip=$(openstack floating ip create "$FIP_POOL" -f value -c floating_ip_address)
fi
openstack server add floating ip "$server_id" "$fip"
echo " $fip"
