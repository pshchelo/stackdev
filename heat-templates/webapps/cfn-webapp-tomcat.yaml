HeatTemplateFormatVersion: '2012-12-12'

Description: Tomcat webapp

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
    Default: demo

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: m1.heat

  ImageId:
    Description: the name or uuid of the image in glance
    Type: String
    Default: fedora-heat-test-image

Resources:

  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              java-1.7.0-openjdk-devel: []
              tomcat-webapps: []
              tomcat-admin-webapps: []
          services:
            systemd:
              tomcat.service:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: { Ref: ImageId }
      InstanceType: { Ref: InstanceType }
      KeyName: { Ref: KeyName }
      UserData:
        Fn::Base64:
          Fn::Replace:
          - WAIT_HANDLE: { Ref: WaitHandle }
          - |
            #!/bin/bash -v
            /opt/aws/bin/cfn-init
            error_exit () { /opt/aws/bin/cfn-signal -e 1 -r "$1" 'WAIT_HANDLE'; exit 1; }
            # allow access to the default Tomcat port
            iptables -I INPUT 1 -p tcp -m tcp --dport 8080 -j ACCEPT
            # install and compile the test tomcat servlet
            appsrc="https://github.com/pshchelo/hello-world-servlet/archive/nodb.tar.gz"
            app=/var/lib/tomcat/webapps/hello
            mkdir -p $app
            curl -Lk $appsrc | tar xz -C $app --strip-components 1
            javac -cp /usr/share/tomcat/lib/tomcat-servlet-3.0-api.jar $app/WEB-INF/classes/HelloServlet.java
            # restart Tomcat to activate the new servlet
            systemctl restart tomcat.service
            # report success
            /opt/aws/bin/cfn-signal -e 0 -r "LB server setup complete" "WAIT_HANDLE"

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Instance
    Properties:
      Handle: { Ref: WaitHandle }
      Timeout: 1000

Outputs:
  url:
    Description: The URL of the website
    Value:
      Fn::Replace:
      - IpAddress: {'Fn::GetAtt': [ Instance, PublicIp]}
      - http://IpAddress:8080/hello/HelloWorld
