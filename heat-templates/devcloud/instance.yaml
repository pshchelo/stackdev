heat_template_version: queens

parameters:
  public_net:
    type: string
    default: public
  network:
    type: string
    default: pshchelo-dev-infra-net
  subnet:
    type: string
    default: pshchelo-dev-infra-subnet
  key:
    type: string
    default: pshchelo
    description: nova key name and name of the user to create in the VM
  flavor:
    type: string
    default: system.compact.openstack.gateway # 8GB RAM, 4 vCPU, 50GB root
  image:
    type: string
    default: xenial-server-cloudimg-amd64-qcow
    #default: bionic-server-cloudimg-amd64-20200724
    #default: focal-server-cloudimg-amd64-20210914
  az:
    type: string
    default: nova
  name:
    type: string
    default: devstack
    description: name of the vm to be appended to name of the key

resources:

  server_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      fixed_ips:
        - subnet: { get_param: subnet }
      port_security_enabled: False

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }

  floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: server_port }

  config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        users:
          - default
          #- name: { get_param: key }
          #  shell: /bin/bash
          #  sudo: "ALL=(ALL) NOPASSWD:ALL"
          #  ssh_authorized_keys:
          #    - { get_file: "https://github.com/pshchelo.keys" }

  server:
    type: OS::Nova::Server
    properties:
      metadata:
        group: { get_param: key }
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: { get_param: az }
      key_name: { get_param: key }
      name: { list_join: [ '-', [ {get_param: key }, {get_param: name } ] ] }
      networks:
        - port: { get_resource: server_port }
      user_data_format: RAW
      user_data: { get_resource: config }


outputs:
  ip:
    description: IP of the server
    value: { get_attr: [floating_ip, floating_ip_address ] }
