[[local|localrc]]

# As it is, this config will install a very minimal
# OpenStack development system consisting of following services:
# - Identity (Keystone)
# - Image (Glance)
# - Compute (Nova)
# - Networking (Neutron)
#
# tempest and dstat are also enabled to help with testing
#
# NOTE ON DEVSTACK PLUGNS:
# to install from specific gerrit change/patch-set,
# append ' refs/changes/<FG>/<ABCDEFG>/<N>' to the line enabling the plugin
# where ABCDEFG is the change number as in https://review.opendev.org/#/<ABCDEFG>
# and N is the patch-set number.

# How to set custom DEST instead of default /opt/stack
#DEST=/home/pshchelo/stack
#DATA_DIR=/home/pshchelo/stack/data
#SERVICE_DIR=/home/pshchelo/stack/status
#SUBUNIT_OUTPUT=/home/pshchelo/stack/devstack.subunit

# Save devstack log to file for later inspection
#LOGFILE=/opt/stack/devstacklog.txt

# define how services are started
# starting mid-Pike devstack deploys services under systemd by default
# to switch to old behavior of using screen for logs and process restart use:
#USE_SYSTEMD=False
#USE_SCREEN=True

###########
# PASSWORDS
###########

ADMIN_PASSWORD=admin
MYSQL_PASSWORD=mysql
RABBIT_PASSWORD=rabbit
SERVICE_PASSWORD=service


##################
# NETWORK SETTINGS
##################

#MULTI_HOST=True
#HOST_IP=192.168.100.11
# By default, DevStack creates a 10.0.0.0/24 network for instances.
# If this overlaps with the hosts network, you may adjust with the
# following.
#NETWORK_GATEWAY=10.1.0.1
#FIXED_RANGE=10.1.0.0/24
#FIXED_NETWORK_SIZE=256
#FLAT_INTERFACE=eth0

# Floating network settings
# This piece below sets the libvirt-created network where the DevStack
# lives as provider network for floating IPs.
# This enables accessing VMs created inside DevStack from hypervisor
# that runs this DevStack VM.
#PUBLIC_INTERFACE=eth0 # trusty
#PUBLIC_INTERFACE=ens3 # xenial
#FLOATING_RANGE=192.168.200.0/24
#PUBLIC_NETWORK_GATEWAY=192.168.200.1
#Q_FLOATING_ALLOCATION_POOL=start=192.168.100.240,end=192.168.100.249
#Q_USE_PROVIDERNET_FOR_PUBLIC=True
#OVS_PHYSICAL_BRIDGE=br-ex
#PUBLIC_BRIDGE=br-ex
#OVS_BRIDGE_MAPPINGS=public:br-ex

# Some pieces for Ironic's multi-tenancy
#OVS_PHYSICAL_BRIDGE=brbm
#PHYSICAL_NETWORK=mynetwork
#Q_PLUGIN=ml2
#ENABLE_TENANT_VLANS=True
#Q_ML2_TENANT_NETWORK_TYPE=vlan
#TENANT_VLAN_RANGE=100:150
#Q_USE_PROVIDERNET_FOR_PUBLIC=False

##########
# PACKAGES
##########

# Run services under Python3 (default False)
#USE_PYTHON3=True
# run already-installed devstack in offline mode
#OFFLINE=True
# refresh repos
#RECLONE=yes
# always upgrade all Python dependencies
#PIP_UPGRADE=True
# Set libraries that will be installed from git and not PyPI,
# others are added in services sections
#LIBS_FROM_GIT=python-openstackclient


##########
# SERVICES
##########

# timeout for services to start, default is 60
#SERVICE_TIMEOUT=180

### DISABLE EVERYTHING ###
disable_all_services

### BASIC INFRA ###
enable_service mysql
enable_service rabbit
# support for etcd was added mid-Pike
enable_service etcd3
# TLS was added by default in early Queens
enable_service tls-proxy

### PERFORMANCE TRACKING ###
# ATM broken on Focal https://bugs.launchpad.net/ubuntu/+source/dstat/+bug/1866619
#enable_service dstat
# new in Pike
enable_service memory_tracker
# dbcounter was added during Zed cycle
#MYSQL_GATHER_PERFORMANCE=False

### TEMPEST ###
enable_service tempest

### KEYSTONE ###
enable_service key
# disable Keystone V2 completely
#ENABLE_IDENTITY_V2=False
# testing federated Keystone (with remote Shibboleth instance by default)
#enable_plugin keystone https://opendev.org/openstack/keystone
#enable_service keystone-saml2-federation
#TEMPEST_PLUGINS='/opt/stack/keystone-tempest-plugin'

### GLANCE ###
enable_service g-api
#needed for Glance V1, dead since Rocky
#enable_service g-reg
# specify what images to download
#DOWNLOAD_DEFAULT_IMAGES=False
# Heat functional tests image (Fedora based)
#IMAGE_URLS+=",http://tarballs.openstack.org/heat-test-image/fedora-heat-test-image.qcow2"
# Fedora 24 cloud image (e.g. for AWS LoadBalancer resource in Heat)
#IMAGE_URLS+=http://fedora.bhs.mirrors.ovh.net/linux/releases/24/CloudImages/x86_64/images/Fedora-Cloud-Base-24-1.2.x86_64.qcow2
# latest Ubuntu Trusty amd64 cloud image
#IMAGE_URLS+=",https://cloud-images.ubuntu.com/releases/trusty/release/ubuntu-14.04-server-cloudimg-amd64-disk1.img"
#LIBS_FROM_GIT+=,glance_store

### NOVA ###
enable_service n-api n-cond n-sch
enable_service n-api-meta
enable_service n-cauth
enable_service n-novnc
enable_service n-cpu
# Does not exist in Pike and newer
#enable_service n-crt
# Use Nova-network - mutually exclusive with Neutron
#enable_service n-net
# Set nova-compute to use ironic virt-driver
#VIRT_DRIVER=ironic
# Always use config drive whith Ironic nodes
#FORCE_CONFIG_DRIVE=True

### PLACEMENT ###
# Pike and newer
enable_service placement-api placement-client

### NEUTRON ###
enable_service q-svc

## ML2 ## - default up to Wallaby is OVS, since Xena - OVN

# ML2/OVS
#enable_service q-agt q-dhcp q-l3 q-meta q-metering
# need to set the below for OVS on Xena+
# possible are vxlan, gre or gre,vxlan
#Q_ML2_TENANT_NETWORK_TYPE=vxlan
#Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,linuxbridge
#Q_AGENT=openvswitch

# ML2/OVN
# NEED TO ENABLE PUBLIC_NETWORK_GATEWAY EXPLICITLY!!! see above
enable_service q-ovn-metadata-agent
# OVN components
enable_service ovn-controller ovn-northd ovs-vswitchd ovsdb-server
# enable debug logging in OVN itself
#OVN_DBS_LOG_LEVEL=dbg
# node serves as gateway, True for AiO devstack, set to False on dedicated compute
#ENABLE_CHASSIS_AS_GW=False
#OVN_L3_CREATE_PUBLIC_NETWORK=False

### NEUTRON PLUGINS ###
#enable_plugin networking-l2gw https://opendev.org/openstack/networking-l2gw
#enable_service l2gw-plugin l2gw-agent

#enable_plugin networking-generic-switch https://opendev.org/openstack/networking-generic-switch
#GENERIC_SWITCH_USER_MAX_SESSIONS=2

### NEUTRON LBAAS ###
#enable_plugin neutron-lbaas https://opendev.org/openstack/neutron-lbaas
#NEUTRON_LBAAS_SERVICE_PROVIDERV2=LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default
#enable_service q-lbaasv2
#enable_service q-trunk

### OCTAVIA ###
#enable_plugin octavia https://opendev.org/openstack/octavia
#enable_service octavia o-api o-cw o-hk o-hm o-da
#LIBS_FROM_GIT+=,python-octaviaclient

### CINDER ###
enable_service c-sch c-api c-bak
enable_service c-vol
#CINDER_PERIODIC_INTERVAL=10
# How to erase cinder volumes on delete [none, zero, shred]
#CINDER_VOLUME_CLEAR=none
# set the size of the stack volume backing file (in MB, default 10250M)
#VOLUME_BACKING_FILE_SIZE=41000M

### SWIFT ###
#enable_service s-proxy s-object s-container s-account
#SWIFT_REPLICAS=1
#SWIFT_START_ALL_SERVICES=False
#SWIFT_HASH=1234123412341234
#SWIFT_LOOPBACK_DISK_SIZE=10G
# Enable Swift TempUrls
#SWIFT_ENABLE_TEMPURLS=True
#SWIFT_TEMPURL_KEY=tempurl

### CEPH + RADOSGW ###
#enable_plugin devstack-plugin-ceph https://opendev.org/openstack/devstack-plugin-ceph
#ENABLE_CEPH_CINDER=True     # ceph backend for cinder
#ENABLE_CEPH_GLANCE=True     # store images in ceph
#ENABLE_CEPH_C_BAK=True      # backup volumes to ceph
#ENABLE_CEPH_NOVA=True       # allow nova to use ceph resources

### IRONIC ###
#enable_plugin ironic https://opendev.org/openstack/ironic
#LIBS_FROM_GIT+=,python-ironicclient,ironic-lib

#IRONIC_USE_MOD_WSGI=True
#IRONIC_IS_HARDWARE=False
#IRONIC_BAREMETAL_BASIC_OPS=True
# try to use nested KVM if possible
#IRONIC_VM_ENGINE=auto
# Create 3 virtual machines to pose as Ironic's baremetal nodes.
#IRONIC_VM_COUNT=3
# Hardware properties of virtual BM nodes to be crated.
# For CoreOS-based IPA bootsrtap image required RAM is 1024MB.
# To deploy a dib-rebuilt xenial baremetal image, 1536MB RAM is required
# with tinyipa ramdisk.
# For cirros image and tinyipa ramdisk, 384MB RAM is sufficient.
# For IPA in general, required disk is > 4GB.
#IRONIC_VM_SPECS_RAM=512
#IRONIC_VM_SPECS_DISK=5
# Size of the ephemeral partition in GB. Use 0 for no ephemeral partition.
#IRONIC_VM_EPHEMERAL_DISK=0
# Configure available drivers
#IRONIC_ENABLED_DRIVERS=fake,agent_ipmitool
#IRONIC_DEPLOY_DRIVER=agent_ipmitool
#IRONIC_ENABLED_DEPLOY_INTERFACES=iscsi,direct
#IRONIC_DEFAULT_DEPLOY_INTERFACE=direct
#IRONIC_CONFIGURE_GLANCE_WITH_SWIFT=True
# Set default boot option - local or netboot (default)
#IRONIC_DEFAULT_BOOT_OPTION=local
# Type of bootstrap image to build and use.
# Available values are dib, coreos (deprecated), tinyipa
# Default may be different between releases, better to always set explicitly
#IRONIC_RAMDISK_TYPE=tinyipa
# To build your own IPA ramdisk from source, set this to True (default)
#IRONIC_BUILD_DEPLOY_RAMDISK=False
# Use iPXE or PXE (default True)
#IRONIC_IPXE_ENABLED=False
# iPXE on nodes downloads deploy images from Swift (default False)
#IRONIC_IPXE_USE_SWIFT=True
# Enable builtin iPXE boot script and config server (default False)
#IRONIC_IPXE_SERVER_ENABLED=True # NOT MERGED CR369438

# Ironic's multi-tenancy
#IRONIC_USE_LINK_LOCAL=True
#IRONIC_ENABLED_NETWORK_INTERFACES=flat,neutron
#IRONIC_NETWORK_INTERFACE=neutron
#IRONIC_PROVISION_NETWORK_NAME=ironic-provision
#IRONIC_PROVISION_SUBNET_PREFIX=10.0.6.0/24
#IRONIC_PROVISION_SUBNET_GATEWAY=10.0.6.1
#IRONIC_PROVISION_ALLOCATION_POOL='start=10.0.6.10,end=10.0.6.100'

### IRONIC STAGING DRIVERS ###
#enable_plugin ironic-staging-drivers https://opendev.org/x/ironic-staging-drivers
# enable and prepare for ansible-deploy driver,
# usable only when IRONIC_DEPLOY_DRIVER is agent_ipmitool
# for Queens and further:
#IRONIC_STAGING_DRIVER=staging-ansible-ipmi
# for Pike and older
#IRONIC_STAGING_DRIVER=pxe_ipmitool_ansible

### IRONIC-INSPECTOR ###
#enable_plugin ironic-inspector https://opendev.org/openstack/ironic-inspector
#IRONIC_INSPECTOR_BUILD_RAMDISK=True
#IRONIC_INSPECTOR_RAMDISK_ELEMENT=ironic-agent

### HEAT ###
#enable_plugin heat https://opendev.org/openstack/heat
#HEAT_ENABLE_ADOPT_ABANDON=True
#LIBS_FROM_GIT+=,python-heatclient
# Needed until https://review.opendev.org/662476 is backported
#HEAT_BRANCH=stable/stein

### TELEMETRY ###

# WARNING - whith gnocchi extracted from OpenStack
# and subsequently at some point loosing its devstack plugin,
# and panko retired (not exists as of Xena),
# this section might have to be adapted for older openstack / devstack releases

# backends must be enabled before ceilometer!
# PANKO - data backend - DOES NOT EXISTS SINCE XENA!
#enable_plugin panko https://opendev.org/openstack/panko
# GNOCCHI - data backend - devstack plugin DOES NOT EXISTS since gnocchi 4.3!
#enable_plugin gnocchi https://github.com/gnocchixyz/gnocchi

# CEILOMETER - metrics collection
#enable_plugin ceilometer https://opendev.org/openstack/ceilometer
# set shorter sample collection interval (default is 600)
#CEILOMETER_PIPELINE_INTERVAL=15
# send events to alarm queue - needed by EventAlarms in Aodh
#CEILOMETER_EVENT_ALARM=True
# set gnocchi archive policy to use, default is 'ceilometer-low'
#GNOCCHI_ARCHIVE_POLICY_TEMPEST="ceilometer-high-rate"
# ceilometer backend, only gnocchi is supported ATM
#CEILOMETER_BACKEND=gnocchi
# where to install gnocchi from
# - if unset, pip install latest from PyPI
# - if set, pip install -e from that directory or git url
#GNOCCHI_GIT_PATH=$DEST/gnocchi
# AODH - alarming
#enable_plugin aodh https://opendev.org/openstack/aodh

### ZAQAR ###
#enable_plugin zaqar https://opendev.org/openstack/zaqar
#LIBS_FROM_GIT+=,python-zaqarclient

### BARBICAN ###
#enable_plugin barbican https://opendev.org/openstack/barbican
#LIBS_FROM_GIT+=,python-barbicanclient

### DESIGNATE ###
#enable_plugin designate https://opendev.org/openstack/designate
#LIBS_FROM_GIT+=,python-designateclient

### MANILA ###
#enable_plugin manila https://opendev.org/openstack/manila
#LIBS_FROM_GIT+=,python-manilaclient

### MASAKARI ###
#enable_plugin masakari https://opendev.org/openstack/masakari
#LIBS_FROM_GIT+=,python-masakariclient

### HORIZON ###
#enable_service horizon

### HEAT UI ###
#enable_plugin heat-dashboard https://opendev.org/openstack/heat-dashboard
#enable_service heat-dashboard

### OCTAVIA UI ###
#enable_plugin octavia-dashboard https://opendev.org/openstack/octavia-dashboard

### DESIGNATE UI ###
## automatically enabled when both horizon and designate are enabled

### MANILA UI ###
#enable_plugin manila-ui https://opendev.org/openstack/manila-ui

### MASAKARI UI ###
## automatically enabled when both horizon and masakari are enabled

### IRONIC UI ###
#enable_plugin ironic-ui https://opendev.org/openstack/ironic-ui

### BARBICAN UI ###
# as documented but WILL NOT WORK! there's no actual DevStack plugin in the repo
# enable_plugin barbican_ui https://github.com/openstack/barbican-ui

### SKYLINE ###
#enable_plugin skyline-apiserver https://opendev.org/openstack/skyline-apiserver

############################
# POST CONFIG STAGE SETTINGS
############################

#[[post-config|$HEAT_CONF]]
#[DEFAULT]
#convergence_engine=false
#num_engine_workers = 2
#stack_scheduler_hints=true
#hidden_stack_tags=hidden
#encrypt_parameters_and_properties=True
#logging_exception_prefix=%(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s

#[heat_api]
#workers=2

#[heat_api_cfn]
#workers=2

#[cache]
#enabled=True

#[eventlet_opts]
#client_socket_timeout=120

#[oslo_messaging_notifications]
#driver=messagingv2
